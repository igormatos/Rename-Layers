var onRun = function(context) {
    var doc = context.document
    var selection = context.selection
    var identifier = context.command.identifier()

    if (selection.count() == 0) {
        doc.showMessage("Please select one or more items.")
        return
    } else {
        if (identifier == "replace-name") {
            functions.replaceName(doc, selection)
        } else if (identifier == "add-prefix") {
            functions.addPrefix(doc, selection)
        } else if (identifier == "remove-copy") {
            functions.removeCopy(doc, selection)
        } else if (identifier == "format-names") {
            functions.formatNames(doc, selection)
        } else if (identifier == "space-to-underscore") {
            functions.spaceToUnderscore(doc, selection)
        } else if (identifier == "to-lowercase") {
            functions.toLowercase(doc, selection)
        } else if (identifier == "organize-layers") {
            functions.organizeLayers(doc, selection)
        }
    }
}

var functions = {
    "replaceName": function(doc, selection) {
        var newName = doc.askForUserInput_initialValue("New layer name", selection[0].name())

        var loop = selection.objectEnumerator()
        while (layer = loop.nextObject()) {
            layer.setName(newName)
        }
    },
    "addPrefix": function(doc, selection) {
        var prefix = doc.askForUserInput_initialValue("Prefix to Selection", "")

        var loop = selection.objectEnumerator()
        while (layer = loop.nextObject()) {
            var oldName = layer.name()
            var newName = prefix + oldName

            layer.setName(newName)
        }
    },
    "removeCopy": function(doc, selection) {
        var count = 0;

        var loop = selection.objectEnumerator()
        while (layer = loop.nextObject()) {
            var oldName = layer.name()
            var copyStartIndex = oldName.indexOf("copy");

            if ( copyStartIndex !== -1 ) {
                var newName = oldName.substr(0, copyStartIndex - 1)
                layer.setName(newName)

                count = count + 1
            }

        }

        [doc showMessage: "Removed: " + count + " copy"];

        function endsWith(str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }
    },
    "formatNames": function(doc, selection) {
        //var initialNumber = doc.askForUserInput_initialValue("Starts Number Sequence From:", "")
        var loop = selection.objectEnumerator()
        var selectionCount = [selection count]
        var counter = selectionCount;

        for (var i=0; i<selectionCount; i++) {
            var layer = selection[i]

            var oldName = layer.name().substr(2)

            var counterAux = counter.toString();
            if (counter < 10) {
                counterAux = "0" + counterAux;
            }

            var end = oldName.length - 5;
            if ( endsWith(oldName, "copy") ) {
                var oldName = oldName.substr(0, end)
            }

            var newName = counterAux + oldName

            layer.setName(newName)

            counter = counter - 1
        }

        function endsWith(str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }

        [doc showMessage: "Renamed:" + selectionCount + " folders"];

    },
    "spaceToUnderscore": function(doc, selection) {
        var count = 0;

        var loop = selection.objectEnumerator()
        while (layer = loop.nextObject()) {
            var oldName = layer.name();
            var newName = oldName.replace(/ /g, "_");
            layer.setName(newName);
            count++;
        }

        [doc showMessage: "Changed: " + count + " layers"];

    },
    "toLowercase": function(doc, selection) {
        var count = 0;

        var loop = selection.objectEnumerator()
        while (layer = loop.nextObject()) {
            var oldName = layer.name();
            var newName = oldName.toLowerCase();
            layer.setName(newName);
        }

        [doc showMessage: "Changed: " + count + " layers"];

    },

    // "push2LayersPanel": function(sortedReferences, doc, selection) {

    //     var loop = selection.objectEnumerator()

    //     while (layer = loop.nextObject()) {
    //         for (let i = 0; i < sortedReferences.length; i++) {
    //             if (layer == sortedReferences[i].reference) {
    //                 layer.remove();
    //             }
    //         }
    //     }

    //     sortedReferences.forEach(element => {

    //     });

    //     // for (let j = 0; j < sortedReferences.length; j++) {
    //     //     array.forEach(element => {

    //     //     });
    //     // }

    // },

    "organizeLayers": function(context){

        var doc = context.document
        var selection = context.selection
        var identifier = context.command.identifier()

        var refs = getLayersReferences(selection);

        sortLayerObjectReferences(refs);
        //push2LayersPanel(sorted, doc, selection);

        function getLayersReferences(sel) {
            var layerObjectReferences = [];

            var loop = sel.objectEnumerator()
            while (layer = loop.nextObject()) {

                var layerRect = layer.frame();

                log(layer);

                var layerRef = {
                    'x':layerRect.x(), //shape
                    'y':layerRect.y(),
                    'reference': layer
                    //'reference': layer.container()
                };
                layerObjectReferences.push(layerRef);
            }

            return layerObjectReferences;

        }

        function sortLayerObjectReferences (layerObjectReferences) {
            var result = layerObjectReferences.sort(function (a, b) {
                log('aqui!');
                log(a.reference);
                if (a.y > b.y){
                    //a.reference.moveBackward();
                    return -1;
                }

                if (a.y < b.y){
                    a.reference.moveForward();
                    return 1;
                }

                if (a.x > b.x){
                    //a.reference.moveBackward();
                    return -1;
                }

                if (a.x < b.x){
                    a.reference.moveForward();
                    return 1;
                }

                return 0;
            });

            log(JSON.stringify(result));
            //return result;

        }

    }

}
